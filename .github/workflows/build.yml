name: Build

on: [push]

jobs:
  appimage:
    name: AppImage
    runs-on: ubuntu-18.04
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            autoconf \
            automake \
            build-essential \
            ccache \
            cmake \
            cpufrequtils \
            doxygen \
            ethtool \
            g++ \
            git \
            inetutils-tools \
            libairspy-dev \
            libairspyhf-dev \
            libboost-all-dev \
            libfreesrp-dev \
            libfftw3-dev \
            libgmp-dev \
            libhackrf-dev \
            libhidapi-dev \
            liblog4cpp5-dev \
            libncurses5 \
            libncurses5-dev \
            liborc-0.4-dev \
            libpulse-dev \
            libqt5svg5-dev \
            librtlsdr-dev \
            libsndfile-dev \
            libsoapysdr-dev \
            libusb-1.0-0 \
            libusb-1.0-0-dev \
            libusb-dev \
            portaudio19-dev \
            python3-dev \
            python3-distutils \
            python3-mako \
            python3-numpy \
            python3-pip \
            python3-requests \
            python3-scipy \
            python3-setuptools \
            python3-ruamel.yaml \
            qt5-default \
            qt5-gtk-platformtheme \
            qttranslations5-l10n \
            soapysdr-module-remote

          cd /tmp
          git clone https://github.com/gnuradio/volk.git
          cd volk
          git checkout v2.5.1
          git submodule update --init
          mkdir build
          cd build
          cmake ..
          make -j4
          sudo make install

          cd /tmp
          git clone https://github.com/EttusResearch/uhd.git
          cd uhd/host
          git checkout v4.1.0.5
          mkdir build
          cd build
          cmake \
            -DENABLE_C_API=OFF \
            -DENABLE_PYTHON_API=False \
            -DENABLE_EXAMPLES=OFF \
            -DENABLE_UTILS=OFF \
            -DENABLE_TESTS=OFF \
            -DENABLE_SIM=OFF \
            -DENABLE_OCTOCLOCK=OFF \
            -DENABLE_DPDK=OFF \
            -DENABLE_MANUAL=OFF \
            -DENABLE_DOXYGEN=OFF \
            -DENABLE_MAN_PAGES=OFF \
            ..
          make -j4
          sudo make install

          cd /tmp
          git clone https://github.com/gnuradio/gnuradio.git
          cd gnuradio
          git checkout v3.9.6.0
          mkdir build
          cd build
          cmake \
            -DENABLE_DEFAULT=False \
            -DENABLE_GNURADIO_RUNTIME=True \
            -DENABLE_GR_ANALOG=True \
            -DENABLE_GR_AUDIO=True \
            -DENABLE_GR_BLOCKS=True \
            -DENABLE_GR_DIGITAL=True \
            -DENABLE_GR_FFT=True \
            -DENABLE_GR_FILTER=True \
            -DENABLE_GR_NETWORK=True \
            ..
          make -j4
          sudo make install

          cd /tmp
          git clone https://github.com/Nuand/bladeRF.git
          cd bladeRF
          mkdir build
          cd build
          cmake ..
          make -j4
          sudo make install
          sudo ldconfig

          sudo pip3 install pybind11
          sudo ln -s /usr/local/lib/python3.6/dist-packages/pybind11/share/cmake/pybind11 /usr/local/lib/cmake/pybind11
          sudo ln -s /usr/local/lib/python3.6/dist-packages/pybind11/include/pybind11 /usr/local/include/pybind11
          cd /tmp
          git clone https://github.com/dl1ksv/gr-funcube.git
          cd gr-funcube
          mkdir build
          cd build
          cmake ..
          make -j4
          sudo make install
          sudo ldconfig

          cd /tmp
          git clone https://gitea.osmocom.org/sdr/libosmo-dsp.git
          cd libosmo-dsp
          autoreconf -i
          ./configure
          make -j4
          sudo make install
          sudo ldconfig

          cd /tmp
          git clone https://gitea.osmocom.org/sdr/gr-iqbal.git
          cd gr-iqbal
          mkdir build
          cd build
          cmake ..
          make -j4
          sudo make install
          sudo ldconfig

          cd /tmp
          git clone https://gitea.osmocom.org/sdr/gr-osmosdr.git
          cd gr-osmosdr
          mkdir build
          cd build
          cmake -DCMAKE_MODULES_DIR=/usr/lib/x86_64-linux-gnu/cmake ..
          make -j4
          sudo make install
          sudo ldconfig
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Configure
        run: mkdir build && cd build && cmake ..
      - name: Compile
        working-directory: build
        run: make -j4
      - name: Build AppImage
        run: ./appimage.sh
      - name: Save artifact
        uses: actions/upload-artifact@v2
        with:
          name: gqrx-appimage-${{ github.run_id }}
          path: Gqrx-*.AppImage
  macos:
    name: MacOS
    runs-on: macos-10.15
    steps:
      - name: Install dependencies
        run: |
          brew update
          brew install airspy airspyhf boost dylibbundler gnuradio hackrf libbladerf librtlsdr libserialport portaudio pybind11 uhd qt@6
          brew tap pothosware/homebrew-pothos
          brew install soapysdr soapyremote

          cd /tmp
          git clone https://github.com/analogdevicesinc/libiio.git
          cd libiio
          git checkout v0.23
          mkdir build
          cd build
          cmake ..
          make -j4
          sudo make install

          cd /tmp
          git clone https://github.com/analogdevicesinc/libad9361-iio.git
          cd libad9361-iio
          mkdir build
          cd build
          cmake ..
          make -j4
          sudo make install

          cd /tmp
          git clone https://github.com/pothosware/SoapyPlutoSDR.git
          cd SoapyPlutoSDR
          mkdir build
          cd build
          cmake ..
          make -j4
          make install

          cd /tmp
          cp /Library/Frameworks/iio.framework/iio /usr/local/lib/libiio.dylib
          install_name_tool -id "/usr/local/lib/libiio.dylib" /usr/local/lib/libiio.dylib
          cp /Library/Frameworks/ad9361.framework/ad9361 /usr/local/lib/libad9361.dylib
          install_name_tool -id "/usr/local/lib/libad9361.dylib" /usr/local/lib/libad9361.dylib
          install_name_tool -delete_rpath /Library/Frameworks /usr/local/lib/libad9361.dylib
          install_name_tool -change @rpath/iio.framework/Versions/0.23/iio /usr/local/lib/libiio.dylib /usr/local/lib/libad9361.dylib
          install_name_tool -change @rpath/iio.framework/Versions/0.23/iio /usr/local/lib/libiio.dylib /usr/local/lib/SoapySDR/modules0.*/libPlutoSDRSupport.so
          install_name_tool -change @rpath/ad9361.framework/Versions/0.2/ad9361 /usr/local/lib/libad9361.dylib /usr/local/lib/SoapySDR/modules0.*/libPlutoSDRSupport.so

          cd /tmp
          git clone https://gitea.osmocom.org/sdr/gr-iqbal.git
          cd gr-iqbal
          git submodule update --init --recursive
          mkdir build
          cd build
          cmake ..
          make -j4
          make install

          cd /tmp
          git clone https://gitea.osmocom.org/sdr/gr-osmosdr.git
          cd gr-osmosdr
          mkdir build
          cd build
          cmake ..
          LIBRARY_PATH=/usr/local/opt/icu4c/lib make -j4
          make install
      - name: Install Apple certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Configure
        run: mkdir build && cd build && cmake ..
      - name: Compile
        working-directory: build
        run: make -j4
      - name: Build app bundle
        run: ./macos_bundle.sh
      - name: Notarize app bundle
        uses: devbotsxyz/xcode-notarize@v1
        with:
          product-path: Gqrx.app
          appstore-connect-username: ${{ secrets.NOTARIZE_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZE_PASSWORD }}
      - name: Staple app bundle
        run: xcrun stapler staple --verbose Gqrx.app
      - name: Create DMG
        run: hdiutil create Gqrx.dmg -srcfolder Gqrx.app -format UDZO -fs HFS+ -volname Gqrx
      - name: Notarize DMG
        uses: devbotsxyz/xcode-notarize@v1
        with:
          product-path: Gqrx.dmg
          primary-bundle-id: dk.gqrx.gqrx
          appstore-connect-username: ${{ secrets.NOTARIZE_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZE_PASSWORD }}
      - name: Staple DMG
        run: xcrun stapler staple --verbose Gqrx.dmg
      - name: Rename DMG
        run: |
          GQRX_VERSION=$(<version.txt)
          mv Gqrx.dmg Gqrx-$GQRX_VERSION.dmg
      - name: Save artifact
        uses: actions/upload-artifact@v2
        with:
          name: gqrx-macos-${{ github.run_id }}
          path: Gqrx-*.dmg
